name: Android CI

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

jobs:
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Criar google-services.json (se existir)
        run: |
          if [[ -n "${{ secrets.GOOGLE_SERVICES_JSON }}" ]]; then
            echo "${{ secrets.GOOGLE_SERVICES_JSON }}" | base64 --decode > app/google-services.json
          else
            echo "⚠️ GOOGLE_SERVICES_JSON não configurado no Secrets!"
          fi

      - name: Dar permissão ao Gradle Wrapper
        run: chmod +x gradlew

      - name: Rodar testes unitários
        run: |
          ./gradlew test --continue | tee gradle_test_log.txt

      - name: Salvar relatórios de teste
        uses: actions/upload-artifact@v4
        with:
          name: junit-results
          path: app/build/test-results/**/*.xml

      - name: Salvar log dos testes
        uses: actions/upload-artifact@v4
        with:
          name: gradle-test-log
          path: gradle_test_log.txt

  build_apk:
    name: Build & Sign APK
    runs-on: ubuntu-latest
    needs: test  # Só roda se os testes passarem

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Criar google-services.json (se existir)
        run: |
          if [[ -n "${{ secrets.GOOGLE_SERVICES_JSON }}" ]]; then
            echo "${{ secrets.GOOGLE_SERVICES_JSON }}" | base64 --decode > app/google-services.json
          else
            echo "⚠️ GOOGLE_SERVICES_JSON não configurado no Secrets!"
          fi

      - name: Dar permissão ao Gradle Wrapper
        run: chmod +x gradlew

      - name: Restaurar Keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > app/keystore.jks

      - name: Verificar se a keystore foi criada corretamente
        run: ls -l app/keystore.jks

      - name: Ajustar permissões da keystore
        run: chmod 600 app/keystore.jks

      - name: Verificar integridade da keystore
        run: keytool -list -keystore app/keystore.jks -storepass "${{ secrets.KEYSTORE_PASSWORD }}"

      - name: Exportar credenciais para assinatura
        run: |
          echo "KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}" >> $GITHUB_ENV
          echo "KEY_ALIAS=${{ secrets.KEY_ALIAS }}" >> $GITHUB_ENV
          echo "KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}" >> $GITHUB_ENV

      - name: Limpar cache do Gradle
        run: ./gradlew clean

      - name: Gerar APK
        run: |
          ./gradlew assembleRelease --stacktrace --info | tee gradle_build_log.txt

      - name: Salvar APK gerado
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: app/build/outputs/apk/release/app-release.apk

      - name: Salvar log de build
        uses: actions/upload-artifact@v4
        with:
          name: gradle-build-log
          path: gradle_build_log.txt

  firebase_deploy:
    name: Deploy APK to Firebase
    runs-on: ubuntu-latest
    needs: build_apk  # Só roda após a construção do APK

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Instalar Firebase CLI
        run: |
          curl -sL https://firebase.tools | bash

      # Etapa para decodificar as credenciais base64 e criar o arquivo firebase-credentials.json
      - name: Decodificar credenciais do Firebase
        run: |
          echo "${{ secrets.FIREBASE_CREDENTIALS_BASE64 }}" | base64 --decode > firebase-credentials.json

      # Usar o token do Firebase para login no ambiente não interativo
      - name: Fazer login no Firebase com token
        run: firebase use --token ${{ secrets.FIREBASE_TOKEN }}

      # Etapa para fazer o deploy do APK para o Firebase App Distribution
      - name: Distribuir APK para Firebase App Distribution
        run: |
          firebase appdistribution:distribute app/build/outputs/apk/release/app-release.apk \
            --app 816571225632 \
            --groups "grupo-de-teste" \
            --token ${{ secrets.FIREBASE_TOKEN }} \
            --release-notes "Release notes da versão"
